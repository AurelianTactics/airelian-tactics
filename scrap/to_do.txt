working


DONE think through how going from gameengine to different states

DONE want to outline
  core game loop that runs
  state manager that smartly manages states
    need the interface
    sub states that inherit from a base interface
      init game, set up board, start combat, unit input,
      my game engine state needs to kick out more often: ie for slow actions needs to kick out so
        stuff can resolve
  ask agent to write it first and then go from there

DONE so next steps
  DONE can run a C# program. compile it and do hello world
  then do the really basic state stuff. abstract out user input
    gameinit state
    combat init state
    then game loop.
    once sure state manager works for this get my understanding up on it
    make sure can do minimal of what i need

move the combatengine into combatstate and improve the main loop
  abstract the quick/mime/slow into something that makes more sense
  general purpose queue that stores the type of it and has an insert on it
  a flag / check for a 'hey it's time for a unit to go' or 'hey it's mid turn for a unit'

I think I want to demo and mock up a simple build and run of the state stuff to make sure
  I understand it
  It works properly
  That how I am doing the core game engine makes sense with it.
    like current logic for slowaction resolve is just resolve it. Nice for readability and simplicity
    but I think it has to be its own state as it might have its own rendering things so would be nice
    to make it like that maybe? Or maybe that can be done later when it's needed?
      kind of leaning towards later. when  you need the state, then create ita nd use it





/// 2. Implement cleaner separation of concerns:
///    - GameModel: Pure data structures representing game state
///    - GameLogic: Rules and state transitions (platform-agnostic)
///    - Presentation: Rendering and UI (platform-specific)
///    - Input: User interaction handling (platform-specific)

  example in chat. way to modularize everything. pretty neat
  starting here. going to break things down into components. will go back to state system but first want things
  as modular as possible

/// 3. Use dependency injection instead of singletons
///    - Replace PlayerManager.Instance, StatusManager.Instance, etc. with injected dependencies
///    - Makes testing easier and components more reusable
/// 
/// 4. Extract smaller, focused classes from this large state class
///    - PhaseHandler classes for each game phase
///    - ActionResolver classes for different action types


TEST minimal unit service
  - alter HP, increment CT, set next turn etc

- DONE minimal PlayerUnit: need to strip this way down. too much going on, too many dependencies
  - need to make it much more subbed out and go from there
  - DONE basic functionality first then see what needs to be added
    - decrement HP
    - DONE not aliver or not
    - DONE increment CT
  - DONE flag for if AT available probably. think it makes sense to handle here? at least have the flag and function here
    - maybe call it elsewhere
  - DONE CT, speed, PA, HP, move, jump

other minimal stuff to do
- VictoryCondition
  - DONE plan it out
  - DONE update unitSErvice, PlayerUnit and CombatTeamManager to handle the logic
  - logic for putting teams in CombatTeamManager
    - DONE research this
      - some options: config files, API, database, unity approach, scriptable mod, resource manager, Data-Driven ECS (Entity Component System)
      - thinking JSON config files for now and maybe ECS
      - would prefer like a JSON thing that can be passed. not sure how it would work with compiled code without an API
        - maybe see if can read from a shared API json thing. if so then just write/read there until later
        - can always hook up the API at some point if that is how it can work with compiled
          - so reasearch if that works too
        - then reserach in general what recommendations are
    - next steps
      - logic for loading a json team object
      - schema / logic for the team
        - will need a team, unit and basic unit components
        - guess do the map do. something simple for now. can formalize schema later
  - logic for checking if in combatengine if victory condition is met
  - logic in combatengine for doing something with the victory condition
    - pass something back to the state that owns its



- need a game board. would like to be able to render it
  - want tiles as well
  - would be nice to do square and hex

- to set teams and alliances between teams
  - team can be a dict. team id, name, then dict with alliance related to other teams
  - units can store a team id
  - when a unit in incapacitated then check if any in that team are incapacitated or not
    - so incapacitated PU function has to return a value for if a new check is needed. then do the check in US
    - or can be a notification that is caught
  - unit service needs to throw a notification or a bool if a team is incapacitated. can then trigger a victory condition or not
    - or could have the victory condition check be done at different points in the game loop. kind of like this
    - look into how the notification system and listeners would work and how to do that. leaning towards passing the victory condition
    - class around or making it a subset of CombatEngine / CombatObject
- have to be able to move, act (attack only), wait, and set direction
- game lop streamlined of course
- spells, stats and items can wait. maybe do one spell for act
- sub out the dmg calc for now. make it simple
- minimal file to load map and units from. thinking a json




To do

- when / how to go from different states. particulary in combatengine going to a unit takes the next state
- decide what parts of base combatstate you want
- decide what parts of GameLoopState are essential
  - refactor GameLoopState to be more clear

- what vs extensions do I want?
  - cursor extensions?
  - linter?

  abstract reaction/quick/mime/slow action/ immediate fast action into something more general
    this must have been how it was done. unlikely made this complicated initially. it's probably like a queue
    that can be pulled and added to at various spots. and sometimes a toggle to let a unit go first or not

backlog
  team alive check and victory conditions could be better done with listeners
  the state logic and transitions are abstracted way ibut in program.cs and not a logical place
  how am I going to do NameAll like thing but better?
  debugging and running C# in cursor is a pain as of 3/3/25. Research indicates need to use visual studio
    or something else side by side.
  refreshing the turns list and other UI stuff will need some sort of listener
  service files have a bunch of placeholders
  organize the namespaces

Things to try in Cursor
  - different models
  - terminal commands?
  - way to give cursor the overall context/goals of the proejct


Done
  Combat engine is filled in the basics
  DONE implement interfaces for
  status
  unit
  spell

  - DONE how will gameloopstate interact with larger program?
  -MODULARIZE AS MUCH AS POSSIBLE, CAN RECONSTRUCT FROM THE COMPONENTS
  - entering and exiting
  - how to send things to UI and rendering

- DONE misc thoughts on victory condition
  - thinking up next: check victory condition before the increment CT check
    - update team status by passing UnitService and CombatTeammanager to VictoryCondition
    - then if last team standing do the various checks. return true or not and handle in combatengine. lot of ways to speed this up if want to do that later
  - muddling my way through it. need a function in UnitService that given a CombatTeam sees if it is defeated or not
    - kind of messy, have to actively check for it. would be better with a listener that updates when a unit is defeated
    - or maybe the combat team manager is stored in UnitService and can be updated. but that is kind of messy as well
    - maybe just check at a spot in the game loop, then combatmanager checks victory conditions
  - do team and victory as classes and pass around for now. can add listeners later
  - want to store team information and alliance in a class
    - unitservice just sets the values on the units and checks the data from the class
    - can be a listener or passed to player unit and updated if a unit is incapacitated
  - need a victory condition
    - one team incapacitated or not
    - can be a listener or uses team class object to tell