working


DONE think through how going from gameengine to different states

want to outline
  core game loop that runs
  state manager that smartly manages states
    need the interface
    sub states that inherit from a base interface
      init game, set up board, start combat, unit input,
      my game engine state needs to kick out more often: ie for slow actions needs to kick out so
        stuff can resolve
  ask agent to write it first and then go from there



/// 2. Implement cleaner separation of concerns:
///    - GameModel: Pure data structures representing game state
///    - GameLogic: Rules and state transitions (platform-agnostic)
///    - Presentation: Rendering and UI (platform-specific)
///    - Input: User interaction handling (platform-specific)

  example in chat. way to modularize everything. pretty neat
  starting here. going to break things down into components. will go back to state system but first want things
  as modular as possible

/// 3. Use dependency injection instead of singletons
///    - Replace PlayerManager.Instance, StatusManager.Instance, etc. with injected dependencies
///    - Makes testing easier and components more reusable
/// 
/// 4. Extract smaller, focused classes from this large state class
///    - PhaseHandler classes for each game phase
///    - ActionResolver classes for different action types

/// 4. Extract smaller, focused classes from this large state class
///    - PhaseHandler classes for each game phase
///    - ActionResolver classes for different action types

- dependency injections for gameloopstate instead of singletsons
  private readonly IStatusManager _statusManager;
  private readonly ISpellManager _spellManager;
  
  // Dependencies provided through constructor
  public GameLoopState(IStatusManager statusManager, ISpellManager spellManager)
  {
      _statusManager = statusManager;
      _spellManager = spellManager;
  }
    


To do
- when / how to go from different states. particulary in combatengine going to a unit takes the next state
- decide what parts of base combatstate you want
- decide what parts of GameLoopState are essential
  - refactor GameLoopState to be more clear

- what vs extensions do I want?
  - cursor extensions?
  - linter?

backlog
  refreshing the turns list and other UI stuff will need some sort of listener
  service files have a bunch of placeholders

Things to try in Cursor
  - different models
  - terminal commands?
  - way to give cursor the overall context/goals of the proejct


Done
  Combat engine is filled in the basics
  DONE implement interfaces for
  status
  unit
  spell

  - DONE how will gameloopstate interact with larger program?
  -MODULARIZE AS MUCH AS POSSIBLE, CAN RECONSTRUCT FROM THE COMPONENTS
  - entering and exiting
  - how to send things to UI and rendering
