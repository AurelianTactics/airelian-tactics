working


DONE think through how going from gameengine to different states

DONE want to outline
  core game loop that runs
  state manager that smartly manages states
    need the interface
    sub states that inherit from a base interface
      init game, set up board, start combat, unit input,
      my game engine state needs to kick out more often: ie for slow actions needs to kick out so
        stuff can resolve
  ask agent to write it first and then go from there

DONE so next steps
  DONE can run a C# program. compile it and do hello world
  then do the really basic state stuff. abstract out user input
    gameinit state
    combat init state
    then game loop.
    once sure state manager works for this get my understanding up on it
    make sure can do minimal of what i need

move the combatengine into combatstate and improve the main loop
  abstract the quick/mime/slow into something that makes more sense
  general purpose queue that stores the type of it and has an insert on it
  a flag / check for a 'hey it's time for a unit to go' or 'hey it's mid turn for a unit'

I think I want to demo and mock up a simple build and run of the state stuff to make sure
  I understand it
  It works properly
  That how I am doing the core game engine makes sense with it.
    like current logic for slowaction resolve is just resolve it. Nice for readability and simplicity
    but I think it has to be its own state as it might have its own rendering things so would be nice
    to make it like that maybe? Or maybe that can be done later when it's needed?
      kind of leaning towards later. when  you need the state, then create ita nd use it





/// 2. Implement cleaner separation of concerns:
///    - GameModel: Pure data structures representing game state
///    - GameLogic: Rules and state transitions (platform-agnostic)
///    - Presentation: Rendering and UI (platform-specific)
///    - Input: User interaction handling (platform-specific)

  example in chat. way to modularize everything. pretty neat
  starting here. going to break things down into components. will go back to state system but first want things
  as modular as possible

/// 3. Use dependency injection instead of singletons
///    - Replace PlayerManager.Instance, StatusManager.Instance, etc. with injected dependencies
///    - Makes testing easier and components more reusable
/// 
/// 4. Extract smaller, focused classes from this large state class
///    - PhaseHandler classes for each game phase
///    - ActionResolver classes for different action types



To do
- PlayerUnit: need to strip this way down. too much going on, too many dependencies
  - need to make it much more subbed out and go from there
  - basic functionality first then see what needs to be added
- when / how to go from different states. particulary in combatengine going to a unit takes the next state
- decide what parts of base combatstate you want
- decide what parts of GameLoopState are essential
  - refactor GameLoopState to be more clear

- what vs extensions do I want?
  - cursor extensions?
  - linter?

  abstract reaction/quick/mime/slow action/ immediate fast action into something more general
    this must have been how it was done. unlikely made this complicated initially. it's probably like a queue
    that can be pulled and added to at various spots. and sometimes a toggle to let a unit go first or not

backlog
  the state logic and transitions are abstracted way ibut in program.cs and not a logical place
  how am I going to do NameAll like thing but better?
  debugging and running C# in cursor is a pain as of 3/3/25. Research indicates need to use visual studio
    or something else side by side.
  refreshing the turns list and other UI stuff will need some sort of listener
  service files have a bunch of placeholders

Things to try in Cursor
  - different models
  - terminal commands?
  - way to give cursor the overall context/goals of the proejct


Done
  Combat engine is filled in the basics
  DONE implement interfaces for
  status
  unit
  spell

  - DONE how will gameloopstate interact with larger program?
  -MODULARIZE AS MUCH AS POSSIBLE, CAN RECONSTRUCT FROM THE COMPONENTS
  - entering and exiting
  - how to send things to UI and rendering
