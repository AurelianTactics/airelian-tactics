Be Precise
- one task at a time
- break down complexity into small tasks
- make prompts specified and detailed

Be Organized
- tidy projects
    - add features step by step
    - test features after each addition
- start fresh chat each new features
- be willing to roll back to prior commits

Be patient
- build an understanding
- review code before accepting
- debugging is time consuming: with or without an agent

Main skills: thinking, framework, checkpoints, debugging, context
    feature -> test -> error -> debug -> checkpoint -> feature


1. COMPLETED Run the program
    - COMPLETED

2. DONE Run with statemanager, go between 3 states
    - add test cases
        - can do empty calls to and from each state
        - COMPLETED
    - add documentation on statemanager and supporting components
        - high level how it works
        - examples for how to add new states
        - COMPLETED

3. DONE StateManager with state init
    - Prompt:
        In GameInitState I want to load @team_sample.json . I want to take this JSON parse it to a C# object
        and store that object in an object that all States have access to. I want this object to then be accessible
        in the next state transition MapSetupState. Your steps:
            - Add code in GameInitState that loads the @team_sample.json
            - Use @TeamConfigLoader.cs to create the object
            - All versions of @State.cs should be able to hold this object
            - @IState.cs may need to be modified as well
        - reads JSON on the teams
        - passes to object
        - goes to next state with that object
        - next state uses that objec to make the teams
        - COMPLETED
    - test cases:
        - tbd
    - documentation
        - COMPLETED

4. COMPLETED Add other components to state init for the json
    - Planning:
        - I want a master config file.
            - rules for the combat
                - victory condition
                - alliance between teams
            - This will have the teams to load
                - for now player units are in teams in future can be written out
            - the map to load
                - config settings on the map
                - for now: unique id, x, y, z, traversable, terrain, can a player unit start there
    - Prompt
        Expand @GameContext.cs to hold a game config json file. This will require:
            - A game_config.json file in the Configs directory.
                - This file will have:
                    - A section for general that has a key "victory_condition":"last_team_standing" and "alliances" which is list
                    - A section for teams to load, which will be a list of teams to load.
                    This list should be populated with team_sample.json and team_sample_2.json
                    - A section for the map to load. This will be a key value pairing with a TBD map to load
            - Something similar to @TeamConfigLoader.cs will have to be added to Utils to load the config
            - @GameContext will have to be expanded to hold the game config, multiple teams, and map
            - This config will be loaded in @GameInitState.cs
            - @GameInitState.cs will now load all teams listed in the game config and not a single, hardcoded team
        - COMPLETED
    - map
        - COMPLETED Planning: json file.
            - review what was in old version
        -COMPLETED Prompt
            In the Utils directory make a MapConfigLoader.cs file similar to @GameConfigLoader.cs .
            In @GameInitState.cs load the map. Pass the map to to @GameContext.cs.
            
    - COMPLETED reads and passes to the next state with that object
        - COMPLETED general and teams
        - map
    - test cases
    - documentation
        Prompt:
        Write documentation in docs directory on creating a new map, loading a map, and how it is used.
        At the top of the new file have a checklist for when creating a new map.
        Add the file to docs/README.MD .

5. DONE sets up teams, units, victory conditions
    Prompt:
    You are now in @CombatState.cs . You have a GameContext.cs object passed in from earlier states.
    In that GameContext.cs file you have a GameConfig class. Use that GameConfig class to populate values

    COMPLETE Create a file with a class for holding alliance object from the GameContext object. Populate the alliance object.
        DONE need an enum for the alliances
        for each team combination need to default to neutral
            then go through the alliances from the game context and populate accordingly
    COMPLETE Instantiate a victorycondition from @VictoryCondition.cs and set the victory condition from the GameContext object in the state
   
    COMPLETE Populate in @CombatTeamManager.cs the teams from the GameContext Object
        
    COMPLETE populate the unit id
        read in from the GameContext
        output is a dict in unit service, key is the unit id
            need to assign in a fair, snake draft like way

        DONE need to update iunitservice and unitservice to use a dict rather than a list

        DONE Think this through:
            Populate the units in @UnitService.cs from the GameContext object.
            maybe each team has its own list? or do all units in the object and can then access it with the unit id?
            and if you need to iterate over can iterate over it. 
                I'm leaning towards all units in a dict, unique unit id
            will need to assign units intelligently to unit id so it is fair as unit id is a tie breaker
            so need to store next unit id for when adding more new units

        Prompt:

        In @CombatState.cs populate the UnitService unitDict with @PlayerUnit object in the function InitializeUnitsForTeam.
        Each unit from the GameContext should be instantiated as PlayerUnit and added to the unitDict.
        The key for the unitDict will be a newly assigned unitId.
        Lower unitIds are better and start at zero.
        In order to be fair to each team, assign the unitId in a snake draft manner
        where one unitId is assigned per each team in one order and then the next round of unit Ids are assigned in the opposite order
        until no more unit ids remain to be assigned.
        The function for assigning unitId's should be flexible to work with any number of teams from 1 team to 2 or more teams.

     

    - DONE SIMPLE TEST CASE test cases
        FAILED PROMPT Prompt  The AI agent, which often makes mistakes, has added code covering the cases highlighted in the context provided. 
        Now write test cases in teh AirelianTactics.Tests directory. Start out with test cases that can be run seperately from the 
        overall test cases. Later I will ask you to include these tests with the overall tests.

        STOPPED HERE. start over with the tests. Be more modular. THink through what should be tested.

        Note to self: I think asking it to design tests first then write helps. The straight to write
        tests are often bad and kind of nonsense stuff

        Design test cases in the AirelianTactics.Tests directory for
        @CombatState.cs
        * Before writing the tests, decide what tests should be run and submit to me for approval.
        * Start out with test cases that can be run seperately from the overall test cases.
        * Later I will ask you to include these tests with the overall tests.

        Follow up

        dotnet test --filter "FullyQualifiedName~StateManagerTests"

        did one test case, can do more later

    - DONE documentation

        Prompt:
        Add documentation to the docs directory covering code added in @agent_instructs.txt lines 94-133.
        Document how alliances are done in CombatState and related code. 
        Search the docs for any prior documentation and either modify or add
        to that documentation if it exists.

        Document how VictoryCondition are are done in CombatState and related code. 
        Search the docs for any prior documentation and either modify or add
        to that documentation if it exists.

        Document how Team Instantiation in CombatState and related code.
        Search the docs for any prior documentation and either modify or add
        to that documentation if it exists.

        Document how PlayerUnits are populate into unitDict in Cin CombatState and related code.
        Search the docs for any prior documentation and either modify or add
        to that documentation if it exists.


DONE 5. 1 BEFORE STARTING THIS MAKE SURE GAME COMPILES
    then work out on fleshing it out

6. set up map with main functionality
    - map, tiles, etc. and what is needed
    - maybe delete mapinit state if not being used here. Idk, maybe keep it for rendering down the line?
    - test cases
    - documentation

    setting up the map...
        for now squares, will want hexagons later
        prior version had Board, tiles, points

    DONE So i'm thinking do minimal point, tile, and then board
	    then set up with current initiating
        DONE point: x and y
        DONE tile: x, y, height, unit ID
        DONE board: holding the tiles, initiating the tiles, changing unit id
            search
            backlog: expand serach walk and expand search base (ie using other filters to see what tiles in range)

    DONE then ask the agent
        how would they do it?
            Prompt:
            This turn based strategy game will take place on a chess board like grid. What design would you recommend for
        the board?
            aw man, it automatically read the bBoard, point and tile
            Some good ideas for backlog if this gets more complex:
                seperate pathfinding from board storage
                seperate mutable and immutable parts of tile (idk, maybe game makes those mutalbe)
                clean API for common board operations (getting points and tiles)
                caching

        # add board, point, tile context
        Am I missing anything? what do they think of the design?

    Code to write:
        Board or something has to instantiate itself from the map config

        TIMED OUT AFTER TWO MINUTES Prompt:
        So based on your feedback @Board.cs, @Tile.cs, and @Point.cs are largely fine for an early prototype.
        I need code that instantiates the tiles Dictionary in board.
        Use the @MapConfig.cs and instantiate it in @CombatState.cs like done for PlayerUnits and teams.

    DONE 
        prompt
            
        Add code that instantates a Board object in @CombatState.cs. The Board object should be created from the data in @GameContext.cs.

        prompts
        Place units from unitService in @CombatState.cs into the board object in @CombatState.cs. Do a simple placement that deterministically places each unit, starting from the lowest unitId, into the first board tiles that are iterated through in the tiles dictionary.

    test code then commit, can move on to next step


7. integrates the core game engine and loop parts
    - me: maybe plan out the game loop a bit better with my queue ideas
    So the abstraction is three fold
        1.: bunch of waiting stuff like for RL, WA, MP that not dealing with here
            Standby, Prephase, WaitTick, NonCombat, RLWait
        2.: is the time flow that is like being in the game world:
            Tick increment, CT increment, status decrement, slow action decrement
                me: TO DO add a tickincrement and tick variable to increment
                    needs to mod over at some point and a back up variable for it
                StatusTick
                SlowActionTick
                CTIncrement
                to add: Process game flow stuff

        3.: Game Flow stuff that needs to be ordered and unfolded per logic
            FastAction (to add)
            SlowAction
            ActiveTurn
            EndActiveTurn
            Mime
            Reaction
            Quick

            then in game flow stuff want one or multiple queue's where I see the priority on these
            then I can be more flexible in the future and kind of mess with new abilities and new priorities

        ideas:
            different spots for differeng game flow stuff
            two queues: time stuff and game flow stuff
                hardcode the time stuff, can adjust it later if you want
                abstract the time stuff so other things can come later
                    maybe like a list of iterations that loops through
            many quees in game flow stuff
                or just one and then can abstract and do it that way

    More ideas:
        World time
        Add tick increment at end, same order as current but in between each check game time queue

        Game time queue
        Hard coded list of enums
        Each enum is key in dict
        Dict has list of queues
        Check each queue and if action pop from queue and go
        For each queue get first one that is ready with tiebreaker being unit id then queue id. Lowest wins
        At queue order is faster than fast, reaction, mime, mid turn, quick turn, slow action, unit turn

        EndActiveTurn is tricky. tied to the unit ending its turn and triggered on end turn
            so special logic. at end of turn checks if this queue has anything, and this queue only, and empties it
            statuses that trigger it need to be added during this check

    - combat engine, main loop
        - need to set up the player unit and mid turn active turn etc logic correctly
    - test cases
    - documentation



8. what else is needed for MVP
    movement works
    waiting works
    attack works

9. minimal version of "UI" for testing with player interaction

10. what is needed for logging and analysis
    - minimal version