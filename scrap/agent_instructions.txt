Be Precise
- one task at a time
- break down complexity into small tasks
- make prompts specified and detailed

Be Organized
- tidy projects
    - add features step by step
    - test features after each addition
- start fresh chat each new features
- be willing to roll back to prior commits

Be patient
- build an understanding
- review code before accepting
- debugging is time consuming: with or without an agent

Main skills: thinking, framework, checkpoints, debugging, context
    feature -> test -> error -> debug -> checkpoint -> feature


1. COMPLETED Run the program
    - COMPLETED

2. DONE Run with statemanager, go between 3 states
    - add test cases
        - can do empty calls to and from each state
        - COMPLETED
    - add documentation on statemanager and supporting components
        - high level how it works
        - examples for how to add new states
        - COMPLETED

3. DONE StateManager with state init
    - Prompt:
        In GameInitState I want to load @team_sample.json . I want to take this JSON parse it to a C# object
        and store that object in an object that all States have access to. I want this object to then be accessible
        in the next state transition MapSetupState. Your steps:
            - Add code in GameInitState that loads the @team_sample.json
            - Use @TeamConfigLoader.cs to create the object
            - All versions of @State.cs should be able to hold this object
            - @IState.cs may need to be modified as well
        - reads JSON on the teams
        - passes to object
        - goes to next state with that object
        - next state uses that objec to make the teams
        - COMPLETED
    - test cases:
        - tbd
    - documentation
        - COMPLETED

4. COMPLETED Add other components to state init for the json
    - Planning:
        - I want a master config file.
            - rules for the combat
                - victory condition
                - alliance between teams
            - This will have the teams to load
                - for now player units are in teams in future can be written out
            - the map to load
                - config settings on the map
                - for now: unique id, x, y, z, traversable, terrain, can a player unit start there
    - Prompt
        Expand @GameContext.cs to hold a game config json file. This will require:
            - A game_config.json file in the Configs directory.
                - This file will have:
                    - A section for general that has a key "victory_condition":"last_team_standing" and "alliances" which is list
                    - A section for teams to load, which will be a list of teams to load.
                    This list should be populated with team_sample.json and team_sample_2.json
                    - A section for the map to load. This will be a key value pairing with a TBD map to load
            - Something similar to @TeamConfigLoader.cs will have to be added to Utils to load the config
            - @GameContext will have to be expanded to hold the game config, multiple teams, and map
            - This config will be loaded in @GameInitState.cs
            - @GameInitState.cs will now load all teams listed in the game config and not a single, hardcoded team
        - COMPLETED
    - map
        - COMPLETED Planning: json file.
            - review what was in old version
        -COMPLETED Prompt
            In the Utils directory make a MapConfigLoader.cs file similar to @GameConfigLoader.cs .
            In @GameInitState.cs load the map. Pass the map to to @GameContext.cs.
            
    - COMPLETED reads and passes to the next state with that object
        - COMPLETED general and teams
        - map
    - test cases
    - documentation
        Prompt:
        Write documentation in docs directory on creating a new map, loading a map, and how it is used.
        At the top of the new file have a checklist for when creating a new map.
        Add the file to docs/README.MD .

5. DONE sets up teams, units, victory conditions
    Prompt:
    You are now in @CombatState.cs . You have a GameContext.cs object passed in from earlier states.
    In that GameContext.cs file you have a GameConfig class. Use that GameConfig class to populate values

    COMPLETE Create a file with a class for holding alliance object from the GameContext object. Populate the alliance object.
        DONE need an enum for the alliances
        for each team combination need to default to neutral
            then go through the alliances from the game context and populate accordingly
    COMPLETE Instantiate a victorycondition from @VictoryCondition.cs and set the victory condition from the GameContext object in the state
   
    COMPLETE Populate in @CombatTeamManager.cs the teams from the GameContext Object
        
    COMPLETE populate the unit id
        read in from the GameContext
        output is a dict in unit service, key is the unit id
            need to assign in a fair, snake draft like way

        DONE need to update iunitservice and unitservice to use a dict rather than a list

        DONE Think this through:
            Populate the units in @UnitService.cs from the GameContext object.
            maybe each team has its own list? or do all units in the object and can then access it with the unit id?
            and if you need to iterate over can iterate over it. 
                I'm leaning towards all units in a dict, unique unit id
            will need to assign units intelligently to unit id so it is fair as unit id is a tie breaker
            so need to store next unit id for when adding more new units

        Prompt:

        In @CombatState.cs populate the UnitService unitDict with @PlayerUnit object in the function InitializeUnitsForTeam.
        Each unit from the GameContext should be instantiated as PlayerUnit and added to the unitDict.
        The key for the unitDict will be a newly assigned unitId.
        Lower unitIds are better and start at zero.
        In order to be fair to each team, assign the unitId in a snake draft manner
        where one unitId is assigned per each team in one order and then the next round of unit Ids are assigned in the opposite order
        until no more unit ids remain to be assigned.
        The function for assigning unitId's should be flexible to work with any number of teams from 1 team to 2 or more teams.

     

    - DONE SIMPLE TEST CASE test cases
        FAILED PROMPT Prompt  The AI agent, which often makes mistakes, has added code covering the cases highlighted in the context provided. 
        Now write test cases in teh AirelianTactics.Tests directory. Start out with test cases that can be run seperately from the 
        overall test cases. Later I will ask you to include these tests with the overall tests.

        STOPPED HERE. start over with the tests. Be more modular. THink through what should be tested.

        Note to self: I think asking it to design tests first then write helps. The straight to write
        tests are often bad and kind of nonsense stuff

        Design test cases in the AirelianTactics.Tests directory for
        @CombatState.cs
        * Before writing the tests, decide what tests should be run and submit to me for approval.
        * Start out with test cases that can be run seperately from the overall test cases.
        * Later I will ask you to include these tests with the overall tests.

        Follow up

        dotnet test --filter "FullyQualifiedName~StateManagerTests"

        did one test case, can do more later

    - DONE documentation

        Prompt:
        Add documentation to the docs directory covering code added in @agent_instructs.txt lines 94-133.
        Document how alliances are done in CombatState and related code. 
        Search the docs for any prior documentation and either modify or add
        to that documentation if it exists.

        Document how VictoryCondition are are done in CombatState and related code. 
        Search the docs for any prior documentation and either modify or add
        to that documentation if it exists.

        Document how Team Instantiation in CombatState and related code.
        Search the docs for any prior documentation and either modify or add
        to that documentation if it exists.

        Document how PlayerUnits are populate into unitDict in Cin CombatState and related code.
        Search the docs for any prior documentation and either modify or add
        to that documentation if it exists.


DONE 5. 1 BEFORE STARTING THIS MAKE SURE GAME COMPILES
    then work out on fleshing it out

6. set up map with main functionality
    - map, tiles, etc. and what is needed
    - maybe delete mapinit state if not being used here. Idk, maybe keep it for rendering down the line?
    - test cases
    - documentation

    setting up the map...
        for now squares, will want hexagons later
        prior version had Board, tiles, points

    DONE So i'm thinking do minimal point, tile, and then board
	    then set up with current initiating
        DONE point: x and y
        DONE tile: x, y, height, unit ID
        DONE board: holding the tiles, initiating the tiles, changing unit id
            search
            backlog: expand serach walk and expand search base (ie using other filters to see what tiles in range)

    DONE then ask the agent
        how would they do it?
            Prompt:
            This turn based strategy game will take place on a chess board like grid. What design would you recommend for
        the board?
            aw man, it automatically read the bBoard, point and tile
            Some good ideas for backlog if this gets more complex:
                seperate pathfinding from board storage
                seperate mutable and immutable parts of tile (idk, maybe game makes those mutalbe)
                clean API for common board operations (getting points and tiles)
                caching

        # add board, point, tile context
        Am I missing anything? what do they think of the design?

    Code to write:
        Board or something has to instantiate itself from the map config

        TIMED OUT AFTER TWO MINUTES Prompt:
        So based on your feedback @Board.cs, @Tile.cs, and @Point.cs are largely fine for an early prototype.
        I need code that instantiates the tiles Dictionary in board.
        Use the @MapConfig.cs and instantiate it in @CombatState.cs like done for PlayerUnits and teams.

    DONE 
        prompt
            
        Add code that instantates a Board object in @CombatState.cs. The Board object should be created from the data in @GameContext.cs.

        prompts
        Place units from unitService in @CombatState.cs into the board object in @CombatState.cs. Do a simple placement that deterministically places each unit, starting from the lowest unitId, into the first board tiles that are iterated through in the tiles dictionary.

    DONE test code then commit, can move on to next step
        don't need mapsetupstate anymore
        getting weird message of going from mapsetupstate to combat state at weird time
            made not. just a print statement and nothing serious


7. integrates the core game engine and loop parts
    DONE game engine and loop brainstorming
        - me: maybe plan out the game loop a bit better with my queue ideas
        So the abstraction is three fold
            1.: bunch of waiting stuff like for RL, WA, MP that not dealing with here
                Standby, Prephase, WaitTick, NonCombat, RLWait
            2.: is the time flow that is like being in the game world:
                Tick increment, CT increment, status decrement, slow action decrement
                    me: TO DO add a tickincrement and tick variable to increment
                        needs to mod over at some point and a back up variable for it
                    StatusTick
                    SlowActionTick
                    CTIncrement
                    to add: Process game flow stuff

            3.: Game Flow stuff that needs to be ordered and unfolded per logic
                FastAction (to add)
                SlowAction
                ActiveTurn
                EndActiveTurn
                Mime
                Reaction
                Quick

                then in game flow stuff want one or multiple queue's where I see the priority on these
                then I can be more flexible in the future and kind of mess with new abilities and new priorities

            ideas:
                different spots for differeng game flow stuff
                two queues: time stuff and game flow stuff
                    hardcode the time stuff, can adjust it later if you want
                    abstract the time stuff so other things can come later
                        maybe like a list of iterations that loops through
                many quees in game flow stuff
                    or just one and then can abstract and do it that way

        More ideas:
            World time
            Add tick increment at end, same order as current but in between each check game time queue

            Game time queue
            Hard coded list of enums
            Each enum is key in dict
            Dict has list of queues
            Check each queue and if action pop from queue and go
            For each queue get first one that is ready with tiebreaker being unit id then queue id. Lowest wins
            At queue order is faster than fast, reaction, mime, mid turn, quick turn, slow action, unit turn

            EndActiveTurn is tricky. tied to the unit ending its turn and triggered on end turn
                so special logic. at end of turn checks if this queue has anything, and this queue only, and empties it
                statuses that trigger it need to be added during this check

    DONE next steps
        DONE NO NOT IMPLEMENTED So I think I have the loop correct but may want to review
            check the player unit and mid turn active turn etc logic correctly
        DONE need to review my notes above and turn this into logical steps that implement
            basically world time should be simple enough
            then the game time is checked between each world time
                go in order of priority. need to consider how to handle it. thinking dict of queues or dict of dicts
                    DECISION: DICT of queues. key is the type, then each queue in order of resolve
                        set the order on the insert. can always improve later if needed
                    kind of like dict of dict as can key up by resolve time, unit id, and hten unique int that increments
                    eh idk, would have to search through all of them
                    queue would be good because can order on each insert and then just grab from the front
                    and for time to resolve can just use the world tick time so don't have to change time to resolve each time. just check front of the queue
                    either way not such a big deal. if ever becomes an issue lot of algorithms for searching or inserting quickly


        pseusdocode
            DONE world time part
                WRITE UP AND IMPLEMENT THIS LOGIC
                simplify it: tick variable goes up, remove status, increment all units CT
            game time part
                WRITE UP AND IMPLEMENT THIS LOGIC
                    ug struggling with this. could do one big queue. could key teh ticks with the dict
                    option 1:
                        one queue, insert in order. treat it like a list and grab first if if qualifies
                    option 2:
                        dict of queues. each queue attached to a tick. check the instant queue and then the world time dict
                    option 3:
                        dict of queues by type. check each type in order
                            leaning towards this one as gives more flexibility in the type handling
                    if gets to slow and the sorting takes too long then the queues can become trees for easy ordering

                DONE Prompt for gametype object
                I would like a class for GameTypeObject that @CombatState.cs and other files will use constantly.
                The class should have these fields: resolveTick, gameTimeObjectId, Phase, unitId
                    resolveTick defaults to -1.
                    gameTimeObjectId will be given when created and will auto increment and should be unique.
                    Phase and unitId are null for now. 

                DONE Prompt for GameTimeDict
                                Create a new class to tell what part of the game time loop in @CombatState.cs happens next.
                    The class will have a dict of lists.
                    The class will have a list of the game time phases in @Phases.cs. The order of the list is the order the
                    dict of lists is handled.
                    Each list will handle GameTimeObjects
                    Logic will be needed to go through each dict key and look at each list.
                    If first gametimeobject meets criteria then pop the item from the beginning of the list. If not then go to next list
                    for MidTurn and ActiveTurn phases don't use a queue.
                    Do a check to @UnitService.cs and see if there is a midturn unit and if so get the next one and
                    make a @GameTimeObject.cs out of it. For activeTurn see if there is an activeturn unit and
                    get the next one and make an @GameTimeObject.cs out of it.

                DONE how to handle the unit turns
                    option 1: populate GTO when incrementing unit turns. anything over 100 gets a GTO.
                        issue is have to pass the queue to world time
                        if something changes the unit CT, like an ability plus 20 CT, then this doesn't work here
                    option 2: before doing the active turn phase, clear the list and populate it. downside is this potentially happens a lot
                    option 3: create a GTO on the fly. for this list just go to the unit manager and get the next unit
                        kind of ruins the flexibility of the queue of queue things
                        might be needed for quick turns as well? probably not

                    I like OPTION 3
                DONE old scrap:
                    check each queue in order, if anything to do do that.
                    after any time it occurs set the flag
                    to start at the top of this
                    if reaches the end set the flag to proceed to world time part
                    at some point will want to inherit a shared class for the queue but for now can do sorted lists
                        I think inner object should be an inhered class with
                            - tick time to resolve, unique id (lower is better), queue type enum
                                then sub classes can handle things like unit id, map pos etc
                        and each type of list object will be its own class
                        will have the tick to resolve on or a -1 for resolve immediately (I guess the tick check time can be < then is ready to resolve)

        BACKLOG draft all the edge cases and make sure it works
            unit mid turn and then some crazy thing happens
            mime
            quick
            slow action resolving but next one in queue not going

    STOPPED HERE

    DONE GTO deals with when something happens and is used in the queues
        could potentially add in the spell details in it
        thinking instead have the spell object be its own thing or maybe a combination of the two
        I'll need all the spell details eventually:
            https://github.com/AurelianTactics/OpenTactics/blob/main/Assets/Scripts/Combat/SpellName.cs
            most of these should be its own thing
        I think GTO should expand to have
            target
                maybe its  own subclass at some point
                unit, single tile plus AOE, or list of targets
                when spell resolves decides whether it hits the tiles/units/or around based on other criteria
            unit casting it
                need to know this as will often be checks to see if unit able to do the ability or not
            spell object
        so next steps:
            DONE create the spell object. use spellname for now and all nulls
            DONE add to GTO what is needed

    DONE implement wait in unit servcie (maybe do this with spellname later)
    DONE default spell thing for attack

    DONE ask the AI, hey now its someones turn, how should this be handled
        pretty sure collection of new states
            choose which action
                wait state
                ability state
                move state
            need it to be AI or human
            need it to be able to handl outputs from inner sources
            need it to be able to handle outputs from outer sources
                just check for now it an be done and format works. don't actually hook it up

    need something to executes
        wait commands
            takes the GTO, takes the spellname, just reads the string and does the unit service call
                backlog is to make it more abstract. Ie alters unit, unit is itself, state is CT etc
        move commands
            takes the GTO takes the spellname, reads the string and moves the unit
                assume the GTO is correct and doesn't validte move is valid
        act commands
            takes the GTO, tatkes the spellname reads the sting
                checks target tile, checks if unit there. does calculation
                backlog is to make it more abstract. ie alters unit, does HP dmg etc
            
    stop for testing
        This ballooned a bit in complexity.
        need to test core game loop works
        need to test that the activeturn wait works
        need to test that wait objects are being implemented


    once wait works
        then add move
        then add act
        need to test mid active turn works

    hold off on act for now

    so for now midactive turn or active turn, need to handle inputs
        can have AI do wait for now
        or can start having the user inputs
            wait
                subtract 60, 80 or 100 CT depending on what unit did
                this should be easy enough
            move
                choose tile (don't need search for now)
                    will have to update unit position and the board
            attack
                choose tile, create the spell object, instant cast it
                    will have to do a basic calculation
                    will have to apply it to the target

    need something that executes the gameTimeObjects. Ask the AI on the process
        me: I want to describe the types of things
            mid turn or active turn, then user or AI controls the unit
            other things than it resolves and will do something like resolve a spell or what not. hold off implementation
            but stubb it out
            GTO is like a spellOjbect was in prior versions. will have all sorts of math and settings with it
                so maybe add that object to GTO. call it CombatActionObject. flesh it out as you start adding and developing it
            backlog: executes things from the queue (can act like it does)
            current version: shortcut to do the instant attack as only ability so far
    Prompt:


    - run this all by the AI. seems like it iwll work but is it good? bit odd calling from Program.cs.
        kind of hogs the thread in a way. guess will have to add some robust interrupt handling and back to it parts
            how would it work with user wanting to do UI stuff while game is unfolding? guess would have to make UI part seperate
                and can decide to have UI interrupt or UI just run

    - test cases
    - documentation



8. what else is needed for MVP
    movement works
    waiting works
    attack works
    can quit / interrupt combat loop
        option to set it to wait or not. can toggle it so combat can proceed or not
        way to raise a flag for the interrupt
        can always quit
        option for user to quit on their turn
        seperate this into playing modes (one play mode is watching) and testing and debugging
 
9. minimal version of "UI" for testing with player interaction

10. what is needed for logging and analysis
    - minimal version