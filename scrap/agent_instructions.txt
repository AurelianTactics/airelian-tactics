Be Precise
- one task at a time
- break down complexity into small tasks
- make prompts specified and detailed

Be Organized
- tidy projects
    - add features step by step
    - test features after each addition
- start fresh chat each new features
- be willing to roll back to prior commits

Be patient
- build an understanding
- review code before accepting
- debugging is time consuming: with or without an agent

Main skills: thinking, framework, checkpoints, debugging, context
    feature -> test -> error -> debug -> checkpoint -> feature


1. Run the program
    - COMPLETED

2. Run with statemanager, go between 3 states
    - add test cases
        - can do empty calls to and from each state
        - COMPLETED
    - add documentation on statemanager and supporting components
        - high level how it works
        - examples for how to add new states
        - COMPLETED

3. StateManager with state init
    - Prompt:
        In GameInitState I want to load @team_sample.json . I want to take this JSON parse it to a C# object
        and store that object in an object that all States have access to. I want this object to then be accessible
        in the next state transition MapSetupState. Your steps:
            - Add code in GameInitState that loads the @team_sample.json
            - Use @TeamConfigLoader.cs to create the object
            - All versions of @State.cs should be able to hold this object
            - @IState.cs may need to be modified as well
        - reads JSON on the teams
        - passes to object
        - goes to next state with that object
        - next state uses that objec to make the teams
        - COMPLETED
    - test cases:
        - tbd
    - documentation
        - COMPLETED

4. Add other components to state init for the json
    - Planning:
        - I want a master config file.
            - rules for the combat
                - victory condition
                - alliance between teams
            - This will have the teams to load
                - for now player units are in teams in future can be written out
            - the map to load
                - config settings on the map
                - for now: unique id, x, y, z, traversable, terrain, can a player unit start there
    - Prompt
        Expand @GameContext.cs to hold a game config json file. This will require:
            - A game_config.json file in the Configs directory.
                - This file will have:
                    - A section for general that has a key "victory_condition":"last_team_standing" and "alliances" which is list
                    - A section for teams to load, which will be a list of teams to load.
                    This list should be populated with team_sample.json and team_sample_2.json
                    - A section for the map to load. This will be a key value pairing with a TBD map to load
            - Something similar to @TeamConfigLoader.cs will have to be added to Utils to load the config
            - @GameContext will have to be expanded to hold the game config, multiple teams, and map
            - This config will be loaded in @GameInitState.cs
            - @GameInitState.cs will now load all teams listed in the game config and not a single, hardcoded team
        - COMPLETED
    - map
        - Planning: json file. STOPPED here
            - review what was in old version

    - reads and passes to the next state with that object
        - COMPLETED general and teams
        - map
    - test cases
    - documentation

5. sets up teams, units, victory conditions
    - test cases
    - documentation

6. integrates the core game engine and loop parts
    - combat engine, main loop
    - test cases
    - documentation

7. set up map with main functionality
    - map, tiles,e tc and what is needed
    - test cases
    - documentation

8. what else is needed for MVP

9. minimal version of "UI" for testing with player interaction

10. what is needed for logging and analysis
    - minimal version